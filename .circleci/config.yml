# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define executors based on our prebuilt images that contain the Nginx dependencies.
# See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
executors:
  ubuntu_2004:
    docker:
      - image: akitasoftware/nginx-build-ubuntu2004:latest
    resource_class: medium
  ubuntu_2204:
    docker:
      - image: akitasoftware/nginx-build-ubuntu2204:latest
    resource_class: medium
  amzn_2:
    docker:
      - image: akitasoftware/nginx-build-amazon2:latest
    resource_class: medium

# Define a job to be invoked later in a workflow.      
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-module:
    parameters:
      version:
        default: "1.23.3"
        type: string
      platform:
        default: ubuntu_2204
        # This could be of type executor, but then conversion to a string is wonky :(
        type: string 
    executor: <<parameters.platform>>
    environment:
      # The GitHub artifacts list is flat, so all the parameters we need have to be specified
      # in the name of the file.
      MODULE_NAME: ngx_http_akita_module_amd64_<<parameters.platform>>_<<parameters.version>>.so
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout:
          path: "akita"      
      - run:
          name: "Download nginx <<parameters.version>>"
          command: "wget http://nginx.org/download/nginx-<<parameters.version>>.tar.gz"          
      - run:
          name: "Unpack nginx"
          command: "tar -xzf nginx-<<parameters.version>>.tar.gz"
      - run:
          name: "Configure nginx"
          command: "./configure --add-dynamic-module=../akita --with-compat"
          working_directory: "nginx-<<parameters.version>>"
      - run:
          name: "Compile <<parameters.version>>"
          command: "make modules"
          working_directory: "nginx-<<parameters.version>>"
      - run:
          name: "Copy binary to workspace"
          command: |          
            cp nginx-<<parameters.version>>/objs/ngx_http_akita_module.so workspace/$MODULE_NAME
      - persist_to_workspace:
          root: workspace
          paths:
            - nginx_*.so
      - store_artifacts:
          path: ngx_http_akita_module_amd64_<<parameters.platform>>_<<parameters.version>>.so
          destination: amd64/<<parameters.platform>>/ngx_http_akita_module_<<parameters.version>>.so
            
  test-module:
    machine:
      image: ubuntu-2204:2022.10.2
    resource_class: medium
    parameters:
      version:
        default: "1.21.6"
        type: string
    steps:
      - run:
          name: "Install nginx"
          command: |
            echo "deb https://nginx.org/packages/ubuntu/ jammy nginx" > /tmp/nginx.list
            echo "deb-src https://nginx.org/packages/ubuntu/ jammy nginx" >> /tmp/nginx.list
            sudo cp /tmp/nginx.list /etc/apt/sources.list.d/nginx.list
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ABF5BD827BD9BF62
            sudo apt-get update -y
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y "nginx=<<parameters.version>>-*"
      - run:
          name: "Install nginx test dependencies"
          command: |
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y libapparmor1 libcache-memcached-fast-perl libcache-memcached-perl libcgi-compress-gzip-perl libcgi-fast-perl libcgi-pm-perl libencode-locale-perl liberror-perl libfcgi-perl libhtml-parser-perl libhtml-tagset-perl libhttp-date-perl libhttp-message-perl libio-html-perl libio-socket-ip-perl libio-socket-ssl-perl liblocale-gettext-perl liblwp-mediatypes-perl libnet-libidn-perl libnet-ssleay-perl libpcre3 libpcre3-dev libstring-crc32-perl libtext-charwidth-perl libtext-iconv-perl libtext-wrapi18n-perl libtimedate-perl liburi-perl zlib1g zlib1g-dev
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: "Download integration tests"
          # The directory has an unpredicatable name, create an alias for it
          command: |
            wget http://hg.nginx.org/nginx-tests/archive/tip.tar.gz
            tar xzvf tip.tar.gz
            ln -s `ls -1 |  grep nginx-tests` nginx-tests-tip
      - run:
          name: "Execute tests with akita_enable off"
          command: "prove -v . |& tee ../nginx-plus-module-prove-test-verbose || true"
          environment:
            TEST_NGINX_BINARY: "/usr/sbin/nginx"
            TEST_NGINX_GLOBALS: "load_module /tmp/workspace/ubuntu_2204/<<parameters.version>>/ngx_http_akita_module.so;"
            TEST_NGINX_GLOBALS_HTTP: "akita_agent localhost:5555; akita_enable off;"
          working_directory: "nginx-tests-tip"
      - store_artifacts:
          path: nginx-plus-module-prove-test-verbose
          destination: "nginx-test-results-<<parameters.version>>/nginx-plus-module-prove-test-verbose"

  release-module:
    docker:
      - image: cimg/go:1.20
    resource_class: medium
    steps:
      - checkout:
          path: "akita"      
      - attach_workspace:
          at: ./artifacts
      - run:
          name: "Build GHR"
          command: go get github.com/tcknsm/ghr
      - run:
          # Fails if release already exists; bump VERSION file on the release branch in order to kick off a new release.
          name: "Create release"
          command: ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r {CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} `cat akita/VERSION` ./artifacts/
      
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  release-akita-module:
     jobs:
      - build-module:
          # Build just a single version on non-release branches
          name:
            smoke-v<<matrix.version>>-<<matrix.platform>>
          filters:
            branches:
              ignore:
                - release
          matrix:
            parameters:
              version: ["1.23.3"]
              platform: ["ubuntu_2204"]
      - build-module:
          # Build whole matrix on the release branch
          name:
            build-v<<matrix.version>>-<<matrix.platform>>
          filters:
            branches:
              only:
                - release
          matrix:
            parameters:
              version: ["1.23.3", "1.22.1", "1.22.0", "1.21.6", "1.18.0"]
              platform: ["ubuntu_2204","ubuntu_2004","amzn_2"]
      - test-module:
          # Execute tests on Ubuntu 22.04 only for now  
          name:
            Nginx integration test using <<matrix.version>>
          requires:
            - build-v<<matrix.version>>-ubuntu_2204
          filters:
            branches:
              only:
                - release
          matrix:
            parameters:
              # 1.21.6 is not in the nginx repository, only 1.20 and 1.22
              version: ["1.22.1"]
      - release-module:
          requires:
            - build-module
          filters:
            branches:
              only:
                - release

